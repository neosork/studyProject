
import Foundation

/*:
 ## Задание 2
 
 >Во время выполнения данного задания, вы будете выводить в консоль опциональные значения.  Компилятор будет выдавать предупреждение: «Expression implicitly coerced from `Int?` to Any».  В данном случае обращать внимание на это предупреждение не нужно.
 
 Ваше приложение запрашивает пользователя его возраст.  Введённые пользователем данные передаются вам в виде текста, `String`.  Однако, вам нужно сохранить значение в виде целого числа `Int`.  Пользователь может сделать ошибку и ввести неверные данные.
 
 Объявите свойство `userInputAge` с типом `String` и присвойте ему значение "34e" для моделирования опечатки.  Затем определите свойство `userAge` с явно заданным типом `Int` и присвойте ему целочисленное значение, извлеченное из свойства `userInputAge`.  Какую ошибку вы получаете? Объясните, что это значит.
 */
let userInputAge = "34е"
//let userAge: Int = Int(userInputAge)
// говорит о том что невозможно привести стрингу в инт и предалагает сделать опционал


/*:
 Теперь поменяйте тип `userAge` на `Int?`, и выведите на консоль значение `userAge`.  Почему значение `userAge` равно `nil`?  Ответьте в комментарии или внутри print.
 */
let userAge: Int? = Int(userInputAge)
//print(userAge)
//запись Int? — это объявление контейнера, экземпляр которого может содержать внутри nil (состояние None Int) либо значение типа Int (состояние Some Int).


/*:
 Теперь исправьте опечатку в значении `userInputAge`.  Что-нибудь в результатах вывода кажется вам неуместным?
 
 Снова выведите на консоль `userAge`, но теперь извлеките `userAge` с помощью оператора «!».
 */
//print(userAge!)
//вроде все ок)


/*:
 Используйте привязку опционалов для извлечения `userAge`.  Если `userAge` содержит значение, выведите его в консоль.
 */
if let userAge = userAge {
    print(userAge)
}


/*:
 Теперь снова эмулируйте опечатку и попробуйте вывести на консоль целочисленное значение переменной `userInputAge`, при помощи оператора "!". Какую ошибку вы получаете? Почему?
 */
print(userInputAge!)
//не опциональное значение 


//: [Ранее: Задание 1](@previous)  |  задание 2 из 4  |  [Далее: Задание 3](@next)
